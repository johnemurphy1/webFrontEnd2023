Web Technologies
================
As usual, ask questions, work together in breakout rooms, help each other
Remember there is a 'knowledge check' quiz
The quiz is 21 questions, multiple choice (as always)
Probably one of your team will major on the UI

- HTML, CSS and JavaScript
- Angular does loads of stuff for you
- Project: use what you like

What you need if using your own machines (already installed on VMs):
- NodeJS https://nodejs.org/en (go for 18.x LTS)
- An editor such as VS Code
- we will install Angular together a little later

Web Technologies are evolving fast
Good to know the underlying HTML, CSS and ES 
but easier to use Angular (or React etc)

Project will probably only need a SPA front-end, calling your back-end

HTML CSS and JavaScript/ES
--------------------------
>>>> nb for 'emet' need to update VSCode

HTML for content
- open a folder in VSCode
- make index.html
- Type ! then press tab to auto-complete content of a web page
- nested elements with attributes for content
- semantic tags
- footer with &copy;
- images, links, aria
- form, list, table, button
- data, charts
- simple creational exercise

CSS for presentation style
- attach style sheet to index.html
- Tag, Id and class styles
- color, background-color, border
- Cascade
- comma, space and >
- way easier to use e.g. Bootstrap

Media Queries
- use chrome mobile simulator
- basic overview of media Queries

Layout
- Flexbox intro
- use Bootstrap

ECMAScript (ES) for functionality
- only use latest syntax
- see it downgrade in the ts playground
    https://www.typescriptlang.org/play?#code/
- modular coding is a good idea
- make everything const until it can't be
- let, string, boolean, array, object
- {} is an object, also a block-scope
- arrays etc. are zero-based
- modern way to do fn (looks a bit like Java arrow fn)
UNLIKE Java:
- NOT strictly typed let x=1; x='oh'
- no relation between filename and content
- let is preferred over var
- no 'private' etc.
- ECMAScript does have classes, but we'll see them in Angular
- Typescript is great but we only ned it minimally n Angular (so see later...)

ARIA
- do not ignore best practice

Fetch from API over HTML
- what REST APIs look like
- using fetch (get)
- other http verbs: put, update, delete...
- handling returned data (JSON)
- use sample finance REST API

Angular
-------
- https://angular.io/ and https://angular.io/cli
- Angular uses NodeJS
- automates build tool-chain
- Really simple HTML templating with 'components'
- Really simple API data access with 'services'
- Angular setup and first project (always SPA)
- Architecture and workflow
- Four types of template binding
- Using the FormsModule
- Making and using new components
- @Input and @Output
- Routing
- Services and the HttpClientModule (for API access)
- Structural Directives: *ngIf *ngFor
- hiding or removing content
- Deployment


Loading API data
----------------
- how to fetch data
- dynamic display - this is NOT Python/MatPlotLib

Not Covered
-----------
- web-based charts

How to use a downloaded Angular project
---------------------------------------
- if you download one of the solution Angular projects you will need to install the node_modules
- go to the top-level of the project and in a terminal type:
    npm install
- You will then see all the required dependecies download
- When they have downloaded you can run the project by typing:
    ng serve
